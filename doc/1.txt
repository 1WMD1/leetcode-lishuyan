cc    -c -o main.o main.c
cc    -c -o function.o function.c
cc main.o function.o -o main



GNUMAKEFLAGS := 
<D = $(patsubst %/,%,$(dir $<))
?F = $(notdir $?)
DESKTOP_SESSION = ubuntu
.SHELLFLAGS := -c
XDG_SESSION_TYPE = x11
CWEAVE = cweave
?D = $(patsubst %/,%,$(dir $?))
@D = $(patsubst %/,%,$(dir $@))
XAUTHORITY = /run/user/1001/gdm/Xauthority
GDMSESSION = ubuntu
XMODIFIERS = @im=fcitx
CURDIR := /home/book/wumingda_linux/driver/test
SHELL = /bin/sh
RM = rm -f
CO = co
VTE_VERSION = 5202
_ = /usr/bin/make
PREPROCESS.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F
LINK.m = $(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
XDG_CONFIG_DIRS = /etc/xdg/xdg-ubuntu:/etc/xdg
OUTPUT_OPTION = -o $@
COMPILE.cpp = $(COMPILE.cc)
MAKEFILE_LIST :=  Makefile
@F = $(notdir $@)
IM_CONFIG_PHASE = 2
USERNAME = book
LINK.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
XDG_DATA_DIRS = /usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1001/bus
CC = cc
CHECKOUT,v = +$(if $(wildcard $@),,$(CO) $(COFLAGS) $< $@)
CLUTTER_IM_MODULE = xim
LESSOPEN = | /usr/bin/lesspipe %s
CPP = $(CC) -E
LINK.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
MAKE_HOST := x86_64-pc-linux-gnu
PATH = /home/book/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/book/100ask_imx6ull-sdk/ToolChain/arm-buildroot-linux-gnueabihf_sdk-buildroot/bin
LD = ld
TEXI2DVI = texi2dvi
GPG_AGENT_INFO = /run/user/1001/gnupg/S.gpg-agent:0:1
YACC = yacc
SESSION_MANAGER = local/100ask:@/tmp/.ICE-unix/1854,unix/100ask:/tmp/.ICE-unix/1854
COMPILE.mod = $(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)
XDG_RUNTIME_DIR = /run/user/1001
ARFLAGS = rv
TEXTDOMAIN = im-config
LINK.r = $(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINT = lint
COMPILE.f = $(FC) $(FFLAGS) $(TARGET_ARCH) -c
LINT.c = $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
YACC.m = $(YACC) $(YFLAGS)
YACC.y = $(YACC) $(YFLAGS)
AR = ar
XDG_MENU_PREFIX = gnome-
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
TANGLE = tangle
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
XDG_SESSION_DESKTOP = ubuntu
SSH_AUTH_SOCK = /run/user/1001/keyring/ssh
GET = get
%F = $(notdir $%)
DISPLAY = :0
COMPILE.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
CTANGLE = ctangle
GTK_IM_MODULE = fcitx
.LIBPATTERNS = lib%.so lib%.a
LINK.C = $(LINK.cc)
PWD = /home/book/wumingda_linux/driver/test
LINK.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)
XDG_SEAT = seat0
PREPROCESS.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F
SSH_AGENT_PID = 1935
LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
GTK_MODULES = gail:atk-bridge
LINK.s = $(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)
HOME = /home/book
LESSCLOSE = /usr/bin/lesspipe %s %s
LOGNAME = book
MAKE_VERSION := 4.1
GNOME_DESKTOP_SESSION_ID = this-is-deprecated
^D = $(patsubst %/,%,$(dir $^))
XDG_VTNR = 2
MAKELEVEL := 0
COMPILE.m = $(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
COLORTERM = truecolor
MAKE = $(MAKE_COMMAND)
QT_IM_MODULE = fcitx
SHLVL = 1
AS = as
PREPROCESS.S = $(CC) -E $(CPPFLAGS)
GNOME_SHELL_SESSION_MODE = ubuntu
COMPILE.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
XDG_SESSION_ID = 2
USER = book
FC = f77
.DEFAULT_GOAL := all
XDG_CURRENT_DESKTOP = ubuntu:GNOME
%D = $(patsubst %/,%,$(dir $%))
WEAVE = weave
MAKE_COMMAND := make
LINK.cpp = $(LINK.cc)
F77 = $(FC)
OLDPWD = /home/book/wumingda_linux/driver
.VARIABLES := 
PC = pc
*F = $(notdir $*)
COMPILE.def = $(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)
LEX = lex
ARCH = arm
MAKEFLAGS = p
MFLAGS = -p
*D = $(patsubst %/,%,$(dir $*))
LEX.l = $(LEX) $(LFLAGS) -t
LEX.m = $(LEX) $(LFLAGS) -t
+D = $(patsubst %/,%,$(dir $+))
COMPILE.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c
+F = $(notdir $+)
M2C = m2c
QT_ACCESSIBILITY = 1
CROSS_COMPILE = arm-buildroot-linux-gnueabihf-
TEXTDOMAINDIR = /usr/share/locale/
MAKEFILES := 
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
<F = $(notdir $<)
CXX = g++
COFLAGS = 
COMPILE.C = $(COMPILE.cc)
QT4_IM_MODULE = fcitx
GJS_DEBUG_TOPICS = JS ERROR;JS LOG
GNOME_TERMINAL_SCREEN = /org/gnome/Terminal/screen/6f68a31a_2ae0_4edb_8cdf_d56ab994d8b1
^F = $(notdir $^)
COMPILE.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c
LINK.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
GNOME_TERMINAL_SERVICE = :1.85
SUFFIXES := .out .a .ln .o .c .cc .C .cpp .p .f .F .m .r .y .l .ym .yl .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
WINDOWPATH = 2
COMPILE.s = $(AS) $(ASFLAGS) $(TARGET_MACH)
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
GJS_DEBUG_OUTPUT = stderr
.RECIPEPREFIX := 
MAKEINFO = makeinfo
MAKE_TERMERR := /dev/pts/0
OBJC = cc
LINK.f = $(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)
TEX = tex
LANG = en_US.UTF-8
TERM = xterm-256color
F77FLAGS = $(FFLAGS)
LINK.o = $(CC) $(LDFLAGS) $(TARGET_ARCH)







%.out:

%.a:

%.ln:

%.o:

%: %.o
	$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.c:

%: %.c
	$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.ln: %.c
	$(LINT.c) -C$* $<

%.o: %.c
	$(COMPILE.c) $(OUTPUT_OPTION) $<

%.cc:

%: %.cc
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.cc
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

%.C:

%: %.C
	$(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.C
	$(COMPILE.C) $(OUTPUT_OPTION) $<

%.cpp:

%: %.cpp
	$(LINK.cpp) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.cpp
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

%.p:

%: %.p
	$(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.p
	$(COMPILE.p) $(OUTPUT_OPTION) $<

%.f:

%: %.f
	$(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.f
	$(COMPILE.f) $(OUTPUT_OPTION) $<

%.F:

%: %.F
	$(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.F
	$(COMPILE.F) $(OUTPUT_OPTION) $<

%.f: %.F
	$(PREPROCESS.F) $(OUTPUT_OPTION) $<

%.m:

%: %.m
	$(LINK.m) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.m
	$(COMPILE.m) $(OUTPUT_OPTION) $<

%.r:

%: %.r
	$(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.r
	$(COMPILE.r) $(OUTPUT_OPTION) $<

%.f: %.r
	$(PREPROCESS.r) $(OUTPUT_OPTION) $<

%.y:

%.ln: %.y
	$(YACC.y) $< 
	 $(LINT.c) -C$* y.tab.c 
	 $(RM) y.tab.c

%.c: %.y
	$(YACC.y) $< 
	 mv -f y.tab.c $@

%.l:

%.ln: %.l
	@$(RM) $*.c
	 $(LEX.l) $< > $*.c
	$(LINT.c) -i $*.c -o $@
	 $(RM) $*.c

%.c: %.l
	@$(RM) $@ 
	 $(LEX.l) $< > $@

%.r: %.l
	$(LEX.l) $< > $@ 
	 mv -f lex.yy.r $@

%.ym:

%.m: %.ym
	$(YACC.m) $< 
	 mv -f y.tab.c $@

%.yl:

%.s:

%: %.s
	$(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.s
	$(COMPILE.s) -o $@ $<

%.S:

%: %.S
	$(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.S
	$(COMPILE.S) -o $@ $<

%.s: %.S
	$(PREPROCESS.S) $< > $@

%.mod:

%: %.mod
	$(COMPILE.mod) -o $@ -e $@ $^

%.o: %.mod
	$(COMPILE.mod) -o $@ $<

%.sym:

%.def:

%.sym: %.def
	$(COMPILE.def) -o $@ $<

%.h:

%.info:

%.dvi:

%.tex:

%.dvi: %.tex
	$(TEX) $<

%.texinfo:

%.info: %.texinfo
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

%.dvi: %.texinfo
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

%.texi:

%.info: %.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

%.dvi: %.texi
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

%.txinfo:

%.info: %.txinfo
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

%.dvi: %.txinfo
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

%.w:

%.c: %.w
	$(CTANGLE) $< - $@

%.tex: %.w
	$(CWEAVE) $< - $@

%.ch:

%.web:

%.p: %.web
	$(TANGLE) $<

%.tex: %.web
	$(WEAVE) $<

%.sh:

%: %.sh
	cat $< >$@ 
	 chmod a+x $@

%.elc:

%.el:

(%): %
	$(AR) $(ARFLAGS) $@ $<

%.out: %
	@rm -f $@ 
	 cp $< $@

%.c: %.w %.ch
	$(CTANGLE) $^ $@

%.tex: %.w %.ch
	$(CWEAVE) $^ $@

%:: %,v
	$(CHECKOUT,v)

%:: RCS/%,v
	$(CHECKOUT,v)

%:: RCS/%
	$(CHECKOUT,v)

%:: s.%
	$(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<

%:: SCCS/s.%
	$(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<



.web.p:
	$(TANGLE) $<

function.c:

.l.r:
	$(LEX.l) $< > $@ 
	 mv -f lex.yy.r $@

.dvi:

.ym:

.f.o:
	$(COMPILE.f) $(OUTPUT_OPTION) $<

.l:

.m:
	$(LINK.m) $^ $(LOADLIBES) $(LDLIBS) -o $@

.ln:

.o:
	$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

.y:

.def.sym:
	$(COMPILE.def) -o $@ $<

.p.o:
	$(COMPILE.p) $(OUTPUT_OPTION) $<

.p:
	$(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@

.txinfo.dvi:
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

main.c:

.a:

.yl:

.l.ln:
	@$(RM) $*.c
	 $(LEX.l) $< > $*.c
	$(LINT.c) -i $*.c -o $@
	 $(RM) $*.c

.F.o:
	$(COMPILE.F) $(OUTPUT_OPTION) $<

.texi.info:
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

.w.c:
	$(CTANGLE) $< - $@

.texi.dvi:
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

.ch:

.m.o:
	$(COMPILE.m) $(OUTPUT_OPTION) $<

.cc:
	$(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@

.cc.o:
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

.def:

.SUFFIXES: .out .a .ln .o .c .cc .C .cpp .p .f .F .m .r .y .l .ym .yl .s .S .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo .w .ch .web .sh .elc .el

.c.o:
	$(COMPILE.c) $(OUTPUT_OPTION) $<

Makefile:

.r.o:
	$(COMPILE.r) $(OUTPUT_OPTION) $<

.r:
	$(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@

.ym.m:
	$(YACC.m) $< 
	 mv -f y.tab.c $@

.y.ln:
	$(YACC.y) $< 
	 $(LINT.c) -C$* y.tab.c 
	 $(RM) y.tab.c

.elc:

.l.c:
	@$(RM) $@ 
	 $(LEX.l) $< > $@

.out:

all: main

.C:
	$(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@

.r.f:
	$(PREPROCESS.r) $(OUTPUT_OPTION) $<

.S:
	$(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@

.texinfo.info:
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

.c:
	$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@

.w.tex:
	$(CWEAVE) $< - $@

.c.ln:
	$(LINT.c) -C$* $<

.s.o:
	$(COMPILE.s) -o $@ $<

.s:
	$(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@

.texinfo.dvi:
	$(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

.el:

.lm.m:
	@$(RM) $@ 
	 $(LEX.m) $< > $@

.y.c:
	$(YACC.y) $< 
	 mv -f y.tab.c $@

.web.tex:
	$(WEAVE) $<

.texinfo:

.DEFAULT:

.h:

function.o: function.c
	$(COMPILE.c) $(OUTPUT_OPTION) $<

.tex.dvi:
	$(TEX) $<

.cpp.o:
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

.cpp:
	$(LINK.cpp) $^ $(LOADLIBES) $(LDLIBS) -o $@

clean:
	rm *.o main -rf

.C.o:
	$(COMPILE.C) $(OUTPUT_OPTION) $<

.texi:

.txinfo:

.tex:

.txinfo.info:
	$(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

.sh:
	cat $< >$@ 
	 chmod a+x $@

main: main.o function.o
	$(CC) $^ -o $@

main.o: main.c
	$(COMPILE.c) $(OUTPUT_OPTION) $<

.S.s:
	$(PREPROCESS.S) $< > $@

.mod:
	$(COMPILE.mod) -o $@ -e $@ $^

.mod.o:
	$(COMPILE.mod) -o $@ $<

.F.f:
	$(PREPROCESS.F) $(OUTPUT_OPTION) $<

.w:

.S.o:
	$(COMPILE.S) -o $@ $<

.F:
	$(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@

.web:

.sym:

.f:
	$(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@

.info:






#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "function.h"
#include <stdbool.h>



/*===============================================================================1、翻转矩阵===============================================================================*/
// 旋转矩阵

// 给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。

// 不占用额外内存空间能否做到？

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/clpgd/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

// int main()
// {
// 	int i,j;
// 	int arr[4][4];
// 	arr_setup_2D(4,4,arr);
// 	printf("打印随机生成的2维数组：\n");
// 	for(i=0 ; i<4 ;i++)
// 	{
// 		for( j=0 ;j<4;j++)
// 		{
// 			printf("%15d",arr[i][j]);
// 		}
// 		printf("\n");
// 	}
// 	rotate(4,4,arr);
// 	printf("打印翻转生成的2维数组：\n");
// 	for(i=0 ; i<4 ;i++)
// 	{
// 		for(j=0 ;j<4;j++)
// 		{
// 			printf("%15d",arr[i][j]);
// 		}
// 		printf("\n");
// 	}

// 	return 0;
// }

/*===============================================================================2、零矩阵===============================================================================*/
// 零矩阵

// 编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/ciekh/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
// 





// int main()
// {
// 	int i,j;
// 	int arr[3][4];
// 	arr_setup_2D(3,4,arr);
// 	//生成二维数组
// 	printf("打印随机生成的2维数组：\n");
// 	for(i=0 ; i<3 ;i++)
// 	{
// 		for( j=0 ;j<4;j++)
// 		{
// 			printf("%15d",arr[i][j]);
// 		}
// 		printf("\n");
// 	}
// 	//找到下标
// 	struct array_2D_flag *flags_arr;
// 	flags_arr = search_arr_2D(0,3,4,arr);
// 	for (i = 0; i < 10;i++)
// 	{
// 		if (flags_arr[i].row != 1024)
// 		{
// 			printf("row:%d,col:%d\n",flags_arr[i].row,flags_arr[i].col);
// 		}
// 		else
// 		{
// 			break;
// 		}
		
// 	}
// 	//清零
// 	zero_arr(flags_arr,3,4,arr);
// 	printf("打印清0后的2维数组：\n");
// 	for(i=0 ; i<3 ;i++)
// 	{
// 		for( j=0 ;j<4;j++)
// 		{
// 			printf("%15d",arr[i][j]);
// 		}
// 		printf("\n");
// 	}

// 	return 0;

// } 




/*===============================================================================3、寻找数组的中心索引===============================================================================*/
// 寻找数组的中心索引

// 给你一个整数数组 nums ，请计算数组的 中心下标 。

// 数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。

// 如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。

// 如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/yf47s/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
// 




// int main()
// {
// //随机创建一维数组
// 	int array[10];
// 	arr_setup_1D(10,array);
// 	for(int i =0;i<10 ;i++)
// 	{
// 		printf("第%d个元素是%d\n",i,array[i]);
// 	}
// //寻找索引
// 	int err=center_index_array(array, 10);
// 	if(err == -1){
// 		printf("数组没有找到合适的中心下标\n");
// 	}
// 	else
// 	{
// 		printf("找到了中心下标志%d\n",err);

// 	}
// 	return 0;

// }

/*===============================================================================4、搜索插入位置===============================================================================*/
// 搜索插入位置

// 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

// 请必须使用时间复杂度为 O(log n) 的算法。

 

// 示例 1:

// 输入: nums = [1,3,5,6], target = 5
// 输出: 2

// 示例 2:

// 输入: nums = [1,3,5,6], target = 2
// 输出: 1

// 示例 3:

// 输入: nums = [1,3,5,6], target = 7
// 输出: 4

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/cxqdh/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
// 

// int main()
// {
// 	//生成一个一维数组，选择手动生成一个顺序数组
// 	int  array[10];
// 	arr_setup_1D(10,array);
// 	for(int i =0;i<10 ;i++)
// 	{
// 		printf("第%d个元素是%d\n",i,array[i]);
// 	}

// 	//采用插值查找，效率最高
// 	int flag = insertSearch(array, 10, 5);
// 	if(flag == -1){
// 		printf("err:没有找到目标元素\n");
// 		//顺序插入
// 		insert_target(array,10,5);//在一维数组中插入一个元素
// 		for(int i =0;i<11 ;i++)
// 		{
// 			printf("第%d个元素是%d\n",i,array[i]);
// 		}
// 	}
// 	else
// 	{
// 		printf("succes:找到了元素%d,位置是第%d个\n",5,flag);
// 	}
	
// 	return 0;
// }

/*===============================================================================5、合并区间===============================================================================*/
// 合并区间

// 以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。

 

// 示例 1：

// 输入：intervals = [[1,3],[2,6],[8,10],[15,18]]
// 输出：[[1,6],[8,10],[15,18]]
// 解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

// 示例 2：

// 输入：intervals = [[1,4],[4,5]]
// 输出：[[1,5]]
// 解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/c5tv3/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



// int main()
// {
// 	//生成数组
	
// 	struct section array[3];
// 	for (int i = 0; i < 3; i++) 
// 		{
//         	printf("请输入第 %d 个元素的值：", i + 1);
//         	scanf("%d", &array[i].left);
//         	scanf("%d", &array[i].right);
//     	}
//     printf("=====================================================\n");
//      for (int i = 0; i < 3; i++) 
// 		{
//         	printf(" [%d,%d] \n", array[i].left,array[i].right);
//     	}
//     //排序
//    printf("=====================================================\n");
//     InsertSort_section(array, 3);
//  	for (int i = 0; i < 3; i++) 
// 		{
//         	printf(" [%d,%d] \n", array[i].left,array[i].right);
//     	}
    
// 	//合并
//    printf("=====================================================\n");
// 	merge_section(array,3);
//  	for (int i = 0; i < 3; i++) 
// 		{
//         	printf(" [%d,%d] \n", array[i].left,array[i].right);
//     	}	
// 	//输出    
// 	return 0;

// }

/*===============================================================================6、最长公共前缀===============================================================================*/
// 最长公共前缀

// 编写一个函数来查找字符串数组中的最长公共前缀。

// 如果不存在公共前缀，返回空字符串 ""。

 

// 示例 1：

// 输入：strs = ["flower","flow","flight"]
// 输出："fl"

// 示例 2：

// 输入：strs = ["dog","racecar","car"]
// 输出：""
// 解释：输入不存在公共前缀。

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/ceda1/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。




// int main() 
// {
// 	char *strs[] = {"floee", "flooow", "fllww"};//非整数直接这样赋值就行了
// 	printf("%ld\n",strlen(strs[0]));
 
//     int strsSize = sizeof(strs) / sizeof(strs[0]);
//     printf("strsSize：%d\n", strsSize);

//     char *result = longestCommonPrefix(strs, strsSize);
//     printf("最长公共前缀：%s\n", result);
    
//     free(result);
//     return 0;
// }














/*===============================================================================7、最长回文子串===============================================================================*/
// 最长回文子串

// 给你一个字符串 s，找到 s 中最长的回文子串。

// 如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。

 

// 示例 1：

// 输入：s = "babad"
// 输出："bab"
// 解释："aba" 同样是符合题意的答案。

// 示例 2：

// 输入：s = "cbbd"
// 输出："bb"

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/conm7/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
// 
// 

// int main()
// {
// 	char str_array[]="babad";
// 	char * strs; 
// 	strs = longestPalindrome(str_array);
// 	printf("最长回文子串：%s\n", strs);
// }


















/*===============================================================================8、翻转字符串里的单词===============================================================================*/
// 翻转字符串里的单词

// 给你一个字符串 s ，请你反转字符串中 单词 的顺序。

// 单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。

// 返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。

// 注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。

 

// 示例 1：

// 输入：s = "the sky is blue"
// 输出："blue is sky the"

// 示例 2：

// 输入：s = "  hello world  "
// 输出："world hello"
// 解释：反转后的字符串中不能存在前导空格和尾随空格。

// 示例 3：

// 输入：s = "a good   example"
// 输出："example good a"
// 解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/crmp5/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。





// int main()
// {
// 	char str_array[]="the sky is blue ";
// 	printf("str_array:%s\n", str_array);
// 	char * str;
// 	str = reverse_word(str_array);
// 	printf("reverse_string:%s\n",str);
//  	return 0;
// }











/*===============================================================================9、实现 strStr()===============================================================================*/
// 实现 strStr()
// 给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。

 

// 示例 1：

// 输入：haystack = "sadbutsad", needle = "sad"
// 输出：0
// 解释："sad" 在下标 0 和 6 处匹配。
// 第一个匹配项的下标是 0 ，所以返回 0 。

// 示例 2：

// 输入：haystack = "leetcode", needle = "leeto"
// 输出：-1
// 解释："leeto" 没有在 "leetcode" 中出现，所以返回 -1 。

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/cm5e2/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。





// int main()
// {
// 	int len;
// 	char* str_array[]={"sadbutsad\0","sad\0"};
// 	for (int i = 0; i < 2; i++)
// 	{
// 		printf("str_array[%d]%s\n",i,str_array[i]);
// 	}

// 	int  flags;

// 	flags = strstr1(str_array,2);

// 	printf("下标:%d\n", flags);

// }










/*===============================================================================10、实现 反转字符串===============================================================================*/

// 反转字符串

// 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。

// 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。

 

// 示例 1：

// 输入：s = ["h","e","l","l","o"]
// 输出：["o","l","l","e","h"]

// 示例 2：

// 输入：s = ["H","a","n","n","a","h"]
// 输出：["h","a","n","n","a","H"]

// 作者：LeetCode
// 链接：https://leetcode.cn/leetbook/read/array-and-string/cacxi/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


// int main()
// {
// 	char str_array[]="the sky is blue";
// 	printf("str_array:%s\n", str_array);
// 	char * str;
// 	str = reverse_string(str_array);
// 	printf("reverse_string:%s\n",str);
//  	return 0;
// }







/* 测试链表*/

// int main()
// {
// 	int i;
// 	SLTDateType x = 5;
// 	// 动态申请一个节点
// 	SListNode* mylist;
// 	mylist = BuySListNode(5);
// 	SListPrint(mylist);
// 	printf("===============================\n");
// 	// 单链表尾插
// 	SListPushBack(mylist, 4);
// 	SListPrint(mylist);
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	SListPushBack(mylist, 6);
// 	SListPushBack(mylist, 7);	
// 	SListPrint(mylist);
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	SListPushFront(&mylist, 1);//标准双重指针
// 	SListPrint(mylist);
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	SListPopBack(&mylist);
// 	SListPrint(mylist);
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	printf("===============================\n");
// 	SListPopFront(&mylist);
// 	SListPrint(mylist);

// return 0;	
// }


// 给你一个链表的头节点 head 。删除 链表的 中间节点 ，并返回修改后的链表的头节点 head 。

// 长度为 n 链表的中间节点是从头数起第 ⌊n / 2⌋ 个节点（下标从 0 开始），其中 ⌊x⌋ 表示小于或等于 x 的最大整数。

//     对于 n = 1、2、3、4 和 5 的情况，中间节点的下标分别是 0、1、1、2 和 2 。

 

// 示例 1：

// 输入：head = [1,3,4,7,1,2,6]
// 输出：[1,3,4,1,2,6]
// 解释：
// 上图表示给出的链表。节点的下标分别标注在每个节点的下方。
// 由于 n = 7 ，值为 7 的节点 3 是中间节点，用红色标注。
// 返回结果为移除节点后的新链表。 

// 示例 2：

// 输入：head = [1,2,3,4]
// 输出：[1,2,4]
// 解释：
// 上图表示给出的链表。
// 对于 n = 4 ，值为 3 的节点 2 是中间节点，用红色标注。

// 示例 3：

// 输入：head = [2,1]
// 输出：[2]
// 解释：
// 上图表示给出的链表。
// 对于 n = 2 ，值为 1 的节点 1 是中间节点，用红色标注。
// 值为 2 的节点 0 是移除节点 1 后剩下的唯一一个节点。

 

// 提示：

//     链表中节点的数目在范围 [1, 105] 内
//     1 <= Node.val <= 105
//     
//     
//     
//     





// int main()
// {
// 	//1.创建一个单向不循环链表，并且手动或者自动附上初值
// 	// strct listnode* head_main;
// 	// head_main = create_listnode();

// 	// 	//循环创建
//  //  	for(int i = 0 ;i<5 ;i++){
//  //  		int array[]={1,2,3,4,5};
//  //  		insert_listnode(head_main,array[i]);
//  //  	}

//  //  		//打印链表
//  //  	print_listnode(head_main);


// 	//2.创建一个双向循环链表，并且手动或者自动附上初值
// 	// struct listnode
// 	// {
// 	// 	int key;
// 	// 	struct listnode* prev;
// 	// 	struct listnode* next;
// 	// }
// 	// struct listnode * head_main;
// 	// //malloc一个双向循环的节点
// 	// head_main = create_listnode();

// 	// //初始化一个双向循环链表
// 	// init_listnode(head_main);

// 	// //循环构建一个链表
// 	// for(int i = 0 ;i<COUNT ;i++)
// 	// {
// 	// 	int array[] = {1,2,3,4,5};
// 	// 	insert_listnode(head_main,array[i]);
// 	// }

// 	// //打印循环链表
// 	// print_listnode();



// 	//3.创建一个队列，并且手动或者自动附上初值
// 	struct stack{
// 		int stack_data[COUNT];
// 		int top;
// 	}
// 	struct stack stack_main;
// 	//初始化一个栈
// 	init_stack(stack_main);
// 	//判断是否为空
// 	is_empty_of_stack();
// 	//判断是否为满
// 	is_full_of_satck();
// 	//创建一个漫栈
// 	push_stack();
// 	pop_stack();

// 	//打印
// 	print_stack();
	
// 	//4.创建一个栈，并且手动或者自动附上初值

// 	//5.创建一个二维数组，并且手动或者自动附上初值
	
// 	//6.创建一个一维数组，并且手动或者自动附上初值

// }
// struct stack *init_stack()
// {

// }
